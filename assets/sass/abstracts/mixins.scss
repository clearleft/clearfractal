
/**
    https://github.com/sass-mq/sass-mq

    Convert pixels to rems.

    @param {Number} $px - value to convert
    @param {Number} $base-font-size ($base-font-size) - `<body>` font size

    @example scss
        $font-size-in-rems: px2rem(16px);
        p { font-size: px2rem(16px); }

    @requires $base-font-size
    @returns {Number}
*/
@function px2rem($px, $base-font-size: $base-font-size) {
    @if unitless($px) {
        @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
        @return px2rem($px * 1px, $base-font-size);
    }
    @else if unit($px) == rem {
        @return $px;
    }
    @return ($px / $base-font-size) * 1rem;
}

/**
    Same as above but for ems
*/
@function px2em($px, $base-font-size: $base-font-size) {
    @if unitless($px) {
        @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
        @return px2em($px * 1px, $base-font-size);
    }
    @else if unit($px) == em {
        @return $px;
    }
    @return ($px / $base-font-size) * 1em;
}



/* Converts pixels to rems based on the base font size */
@mixin font-size($px) {
    font-size: px2rem($px);
}

/*Font size and line height px to rems*/
@mixin font($size-px, $line-height-px: false) {
    @include font-size($size-px);
    @if $line-height-px {
        line-height: ($line-height-px / $size-px); // line height in px is relative to the current fonts size, not the base font size
    }
}

@mixin heading($hierarchy, $screen: 'narrow') {
    -webkit-font-smoothing: antialiased;
    font-weight: 700;
    font-family: $font-secondary;
    color: $Jet-grey;
    margin-top: px2rem(8px);
    @if ($screen == 'wide') {
        margin-bottom: px2rem(16px);
    }
    @else {
        margin-bottom: px2rem(8px);
    }
    @if ($hierarchy == 'impact') {
        font-family: $font-statement;
        letter-spacing: -1.95px;
        @if ($screen == 'wide') {
            @include font(190px, 160px);
        }
        @elseif ($screen == 'inbetween') {
            font-size: calc( 60px + (190 - 60) * ( (100vw - 300px) / ( 1200 - 300) ));
            // Fluid font size ranging from 60 to 190 pixels
            // if the window is more than 300 pixels wide
            // and the window is less than 1200 pixels wide
        }
        @else {
            @include font(48px, 40px);
        }
    }
    @if ($hierarchy == 'main') {
        font-family: $font-statement;
        letter-spacing: -1.95px;
        @if ($screen == 'wide') {
            @include font(90px, 84px);
        }
        @elseif ($screen == 'inbetween') {
            @include font(60px, 54px);
        }
        @else {
            @include font(36px, 43px);
        }
    }
    @if ($hierarchy == 'secondary') {
        font-family: $font-statement;
        letter-spacing: -0.58px;
        @if ($screen == 'wide') {
            @include font(68px, 75px);
        }
        @elseif ($screen == 'inbetween') {
            @include font(40px, 47px);
        }
        @else {
            @include font(30px, 35px);
        }
    }
    @if ($hierarchy == 'medium') {
        @if ($screen == 'wide') {
            @include font(43px, 50px);
        }
        @else {
            @include font(28px, 33px);
        }
    }
    @if ($hierarchy == 'small') {
        @if ($screen == 'wide') {
            @include font(35px, 40px);
        }
        @else {
            @include font(22px, 27px);
        }
    }
    @if ($hierarchy == 'bump') {
        @if ($screen == 'wide') {
            @include font(28px, 27px);
        }
        @else {
            @include font(18px, 32px);
        }
    }
    @if ($hierarchy == 'body') {
        @if ($screen == 'wide') {
            @include font(22px, 27px);
        }
        @else {
            @include font(16px, 25px);
        }
    }
    @if ($hierarchy == 'context') {
        @include font(14px, 17px);
        text-transform: uppercase;
        color: $mid-grey;
        letter-spacing: 1px;
    }
}
